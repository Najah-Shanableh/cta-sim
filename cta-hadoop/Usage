Commands

hadoop dfs

-ls / # directories valid for input data
-cat <output directory>/*  # give the output for the job
-put <input folder> <file path> # 


Steps:
-Initialize HDFS
	(If a problem arises with "could only be replicated to 0 nodes , instead of 1", remove data and name directories under /usr/local/hadoop/HDFS )
	/usr/local/hadoop/bin/hadoop namenode -format 
-Start hadoop
	/usr/local/hadoop/bin/start-all.sh
-Create the java script with the map reduce classes
	script.java
-cd into the directory with your java script
-Make a directory where the classes will be stored
	mkdir <nameDirectory_classes>
-Execute
	javac -classpath /usr/local/hadoop/hadoop-core-1.0.3.jar -d <nameDirectory_classes> script.java 
-Jar the contents of the <nameDirectory_classes>
	jar -cvf <script_name>.jar -C <nameDirectory_classes>/ .
-Put the files to work on in the input directory
	(If you do not know the directories in which you can put the data use hadoop dfs -ls / also use hadoop dfs -mkdir to create a directory)
	hadoop dfs -put <data_directowry>/ <input_directory>
-Run the application
	hadoop jar script.jar org.myorg.<ClassName> <input_directory> <output_directory>
-See the results
	hadoop dfs -cat /<output_directory>/*

To use this from Eclipse do last 5 steps using:
	hadoop dfs -rmr /tmp/output

	javac -classpath /usr/local/hadoop/hadoop-core-1.0.3.jar -d MapByStop_classes src/main/java/dssg/MapByStop.java

	jar -cvf MapByStop.jar -C MapByStop_classes/ .

	hadoop jar MapByStop.jar dssg.MapByStop /tmp/input /tmp/output

	hadoop dfs -cat /tmp/output/*

Using ECLIPSE and MAVEN it is easier to do it this way (in the cta-hadoop directory):
	hadoop dfs -rmr /tmp/output
	mvn clean package
You will see a .jar in target that says ...SNAPSHOT-job.jar Run:
	hadoop jar target/MapByStop.jar dssg.MapByStop /tmp/input /tmp/output
or
	hadoop jar target/MapByStop-job.jar  /tmp/input /tmp/output

	hadoop dfs -cat /tmp/output/*
	(The output file is named part-00000)

To save the output hdfs file into a local file use:
	hadoop dfs -cat /tmp/ouput/* > file.txt

